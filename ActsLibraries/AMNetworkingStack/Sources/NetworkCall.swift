// NetworkCall.swift
// Generated by Swagger
// https://github.com/swagger-api/swagger-codegen
//
// Changes by Paul Fechner Jr. 03/20/17
// Copyright Â© 2017 ActsMedia. All rights reserved.

import Foundation

/// Basic enum for defining call Types
public enum CallType: String {
    case get = "GET"
    case head = "HEAD"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case connect = "CONNECT"
    case options = "OPTIONS"
    case trace = "TRACE"

    /// Converts the tex to Uppercase and then compares it to the raw values.
    public static func fuzzyMake(from methodText: String, fallbackValue: CallType = .get) -> CallType {
        switch methodText.uppercased() {
        case Self.get.rawValue: return .get
        case Self.head.rawValue: return .head
        case Self.post.rawValue: return .post
        case Self.put.rawValue: return .put
        case Self.delete.rawValue: return .delete
        case Self.connect.rawValue: return .connect
        case Self.options.rawValue: return .options
        case Self.trace.rawValue: return .trace
        default: return fallbackValue
        }
    }
}

/// Basic contract for a Networking provider
public protocol NetworkingProvider {
    static var shared: Self { get }
    var baseURL: URL { get }
    var defaultHeaders: [String:String] { get }

    /// Simplest version of JSONDecodable networking request
    func enqueueRequest<Response: Decodable>(_ request: URLRequest, decoder: JSONDecoder, completion: @escaping (Result<Response, Error>) -> ())
}

public extension NetworkingProvider {

    /// Simplest version of JSONDecodable networking request
    /// uses basic `JSONDecoder()` as `decoder`
    func enqueueRequest<Response: Decodable>(_ request: URLRequest, completion: @escaping (Result<Response, Error>) -> ()) {
        enqueueRequest(request, decoder: JSONDecoder(), completion: completion)
    }

    /// Typical call with a JSONEncodable Body
    func enqueueRequest<Body: Encodable, Response: Decodable>(urlExtension: String, body: Body, method: CallType,
                                                              additionalHeaders: [String:String] = [:], encoder: JSONEncoder = JSONEncoder(),
                                                              decoder: JSONDecoder = JSONDecoder(), completion: @escaping ((Result<Response, Error>) -> ())) {
        var urlRequest = URLRequest(url: baseURL.appendingPathComponent(urlExtension))
        defaultHeaders.forEach { urlRequest.setValue($0.value, forHTTPHeaderField: $0.key)}
        additionalHeaders.forEach { urlRequest.setValue($0.value, forHTTPHeaderField: $0.key)}
        urlRequest.httpMethod = method.rawValue
        do {
            urlRequest.httpBody = try encoder.encode(body)
            enqueueRequest(urlRequest, decoder: decoder, completion: completion)
        }
        catch {
            completion(.failure(error))
        }
    }

    /// Typical call with no Body
    func enqueueRequest<Response: Decodable>(urlExtension: String, method: CallType,
                                             additionalHeaders: [String:String] = [:],
                                             decoder: JSONDecoder = JSONDecoder(), completion: @escaping ((Result<Response, Error>) -> ())) {
        var urlRequest = URLRequest(url: baseURL.appendingPathComponent(urlExtension))
        defaultHeaders.forEach { urlRequest.setValue($0.value, forHTTPHeaderField: $0.key)}
        additionalHeaders.forEach { urlRequest.setValue($0.value, forHTTPHeaderField: $0.key)}
        urlRequest.httpMethod = method.rawValue
        enqueueRequest(urlRequest, decoder: decoder, completion: completion)
    }
}
